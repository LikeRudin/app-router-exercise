// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  
  tweets          Tweet[]
  tweetLikes           TweetLike[]
  comments TweetComment[]
  commentLikes TweetCommentLike[]
  
}

model Tweet {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  
  tweetText String

  likes TweetLike[]
  comments TweetComment[]

  @@index([userId])
}

model TweetLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId Int

  @@index([userId])
  @@index([tweetId])
}


model TweetComment {  
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String 
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  

  tweet Tweet @relation(fields: [TweetId], references: [id], onDelete: Cascade)
  TweetId Int

  parentId Int? 
  parent TweetComment? @relation("commentToComment", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  comments TweetComment[] @relation("commentToComment")
  likes TweetCommentLike[]

  @@index([parentId])
  @@index([userId])
  @@index([TweetId])
}

model TweetCommentLike{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  

  comment TweetComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@index([userId])
  @@index([commentId])

}
